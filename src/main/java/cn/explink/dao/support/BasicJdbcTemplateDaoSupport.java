package cn.explink.dao.support;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import cn.explink.exception.ExplinkRuntimeException;
import cn.explink.util.ReflectionUtil;

// @Repository
public abstract class BasicJdbcTemplateDaoSupport<Entity, ID extends Serializable> {

	protected final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private JdbcTemplate jdbcTemplate;

	/**
	 * the name of table
	 */
	private String tableName;

	/**
	 * the id field
	 */
	private Field idField;

	/**
	 * the name of id field
	 */
	private String idFieldName;

	/**
	 * global variable innodb_lock_wait_timeout, use the following query to find
	 * this value; SHOW GLOBAL VARIABLES LIKE 'innodb_lock_wait_timeout';
	 */
	private int globalLockWaitTimeout = 50;

	/**
	 * the class of the entity
	 */
	private Class<? extends Entity> entityClass;

	public BasicJdbcTemplateDaoSupport(Class<? extends Entity> entityClass) {
		if (entityClass == null) {
			throw new ExplinkRuntimeException("the entity class should not be null for a dao object.");
		}
		this.entityClass = entityClass;
	}

	/**
	 * persistent an entity to database
	 * 
	 * @param entity
	 */
	public void save(Entity entity) {
		Field idField = null;
		try {
			idField = entityClass.getDeclaredField(getIdFieldName());
			Object id = ReflectionUtil.getFieldValue(entity, idField, idField.getType());
			if (id == null) {
				create(entity);
			} else {
				update(entity, id);
			}
		} catch (Exception e) {
			throw new ExplinkRuntimeException("save entity failed for " + entityClass.getName(), e);
		}
	}

	public void update(Entity entity) {
		Object id = null;
		try {
			id = ReflectionUtil.getFieldValue(entity, getIdField(), getIdField().getType());
		} catch (Exception e) {
			logger.warn("can't find the id field for " + entityClass.getName());
		}
		if (id == null) {
			throw new ExplinkRuntimeException("can't update an entity for " + entityClass.getName() + " with null id.");
		} else {
			update(entity, id);
		}
	}

	private void update(Entity entity, Object id) {
		StringBuilder sql = new StringBuilder();
		sql.append("update ").append(getTableName()).append(" set ");
		List<Object> fieldValues = buildFieldsSqlForUpdate(entity, sql);
		sql.append(" where ").append(getIdFieldName()).append(" = ? ");
		fieldValues.add(ReflectionUtil.getFieldValue(entity, getIdField(), getIdField().getType()));
		getJdbcTemplate().update(sql.toString(), fieldValues.toArray());
	}

	private List<Object> buildFieldsSqlForUpdate(Entity entity, StringBuilder sql) {
		List<Object> fieldValues = new ArrayList<Object>();
		Field[] fields = entityClass.getDeclaredFields();
		boolean isFirstField = true;
		for (Field field : fields) {
			if (field.getName().equals(getIdFieldName())) {
				// id will be auto generated by database
				continue;
			}
			Column column = field.getAnnotation(Column.class);
			if (column == null) {
				// this field is not mapping to a column, ignore it.
				continue;
			}

			String columnName = column.name();
			if (columnName == null || columnName.isEmpty()) {
				// use field name as column name if it is not declared
				columnName = field.getName();
			}
			if (isFirstField) {
				isFirstField = false;
			} else {
				sql.append(", ");
			}
			sql.append(columnName).append(" = ?");

			fieldValues.add(ReflectionUtil.getFieldValue(entity, field, field.getType()));
		}
		return fieldValues;
	}

	private Object[] buildFieldsSqlForCreate(Entity entity, StringBuilder sql) {
		Field[] fields = entityClass.getDeclaredFields();
		boolean isFirstField = true;
		List<Object> fieldValues = new ArrayList<Object>();
		for (Field field : fields) {
			if (field.getName().equals(getIdFieldName())) {
				// id will be auto generated by database
				continue;
			}
			Column column = field.getAnnotation(Column.class);
			if (column == null) {
				// this field is not mapping to a column, ignore it.
				continue;
			}

			String columnName = column.name();
			if (columnName == null || columnName.isEmpty()) {
				// use field name as column name if it is not declared
				columnName = field.getName();
			}
			if (isFirstField) {
				isFirstField = false;
			} else {
				sql.append(", ");
			}
			sql.append(columnName);
			fieldValues.add(ReflectionUtil.getFieldValue(entity, field, field.getType()));

		}
		sql.append(") values (");

		isFirstField = true;
		for (int i = 0; i < fieldValues.size(); i++) {
			if (isFirstField) {
				isFirstField = false;
			} else {
				sql.append(", ");
			}
			sql.append("?");
		}
		sql.append(")");
		return fieldValues.toArray();
	}

	public Entity create(Entity entity) {
		return create(entity, true);
	}

	public Entity create(Entity entity, boolean needId) {
		final StringBuilder sql = new StringBuilder();
		sql.append("insert into ").append(getTableName()).append(" (");
		final Object[] fieldValues = buildFieldsSqlForCreate(entity, sql);

		if (needId) {
			KeyHolder keyHolder = new GeneratedKeyHolder();
			getJdbcTemplate().update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {
					PreparedStatement ps = conn.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
					for (int i = 0; i < fieldValues.length; i++) {
						ps.setObject(i + 1, fieldValues[i]);
					}
					return ps;
				}

			}, keyHolder);
			ReflectionUtil.setFieldValue(entity, idField, keyHolder.getKey().toString());
		} else {
			getJdbcTemplate().update(sql.toString(), fieldValues);
		}

		return entity;
	}

	/**
	 * lock an entity
	 * 
	 * @param id
	 * @return
	 */
	protected Entity lock(ID id) {
		Entity entity = null;
		try {
			try {
				// 设置超时时间为较小的值，如果此资源已经被其他事物加锁，则迅速失败当前查询
				// http://dev.mysql.com/doc/innodb-plugin/1.0/en/innodb-other-changes-innodb_lock_wait_timeout.html
				// http://dev.mysql.com/doc/refman/5.1/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout
				jdbcTemplate.execute("set innodb_lock_wait_timeout = 1");
			} catch (Exception e) {
				// ignore this exception
				logger.debug(e.getMessage());
			}
			entity = (Entity) this.load(id, LockOptions.UPGRADE);
		} finally {
			try {
				// 恢复超时时间为数据库的全局设置
				jdbcTemplate.execute("set innodb_lock_wait_timeout = " + globalLockWaitTimeout);
			} catch (Exception e) {
				// ignore this exception
				logger.debug(e.getMessage());
			}
		}
		return entity;
	}

	public Entity get(ID id) {
		return get(id, null);
	}

	public Entity get(ID id, LockOptions lockOption) {
		StringBuilder sql = new StringBuilder();
		sql.append("select * from ").append(getTableName()).append(" where ").append(getIdFieldName()).append(" = ").append("?");
		if (lockOption == LockOptions.UPGRADE) {
			sql.append(" for update");
		}
		return jdbcTemplate.queryForObject(sql.toString(), new Object[] { id }, createRowMapper());
	}

	public Entity load(ID id) {
		return load(id, null);
	}

	public Entity load(ID id, LockOptions lockOption) {
		Entity entity = get(id, lockOption);
		if (entity == null) {
			throw new ExplinkRuntimeException("can not find " + entityClass.getName() + " for " + id);
		}
		return entity;
	}

	protected RowMapper<Entity> createRowMapper() {
		return new RowMapper<Entity>() {
			@Override
			public Entity mapRow(ResultSet rs, int rowNum) throws SQLException {
				Entity entity = null;
				try {
					entity = entityClass.newInstance();
					Field[] fields = entityClass.getDeclaredFields();
					for (Field field : fields) {
						Column column = field.getAnnotation(Column.class);
						Id id = field.getAnnotation(Id.class);
						if (column == null && id == null) {
							continue;
						}

						String columnName = column == null ? null : column.name();
						if (columnName == null || columnName.isEmpty()) {
							columnName = field.getName();
						}

						ReflectionUtil.setFieldValue(entity, field, rs, columnName);
					}
				} catch (Exception e) {
					throw new ExplinkRuntimeException("createRowMapper failed for " + entityClass.getName(), e);
				}
				return entity;
			}
		};
	}

	protected Field getIdField() {
		if (idField == null) {
			initIdFieldAndName();
			if (idField == null) {
				throw new ExplinkRuntimeException("@javax.persistence.Id annotation is not declared for " + entityClass.getName());
			}
		}

		return idField;
	}

	protected String getIdFieldName() {
		if (idFieldName == null) {
			initIdFieldAndName();
			if (idFieldName == null) {
				throw new ExplinkRuntimeException("@javax.persistence.Id annotation is not declared for " + entityClass.getName());
			}
		}

		return idFieldName;
	}

	/**
	 * initial the name of id
	 */
	protected void initIdFieldAndName() {
		Field[] fields = entityClass.getDeclaredFields();
		for (Field field : fields) {
			Annotation annotation = field.getAnnotation(Id.class);
			if (annotation != null) {
				idField = field;
				idFieldName = field.getName();
				return;
			}
		}
	}

	protected String getTableName() {
		if (tableName == null) {
			initTableName();
			if (tableName == null) {
				throw new ExplinkRuntimeException("@javax.persistence.Table annotation is not declared for " + entityClass.getName());
			}
		}
		return tableName;
	}

	private void initTableName() {
		Annotation annotation = entityClass.getAnnotation(Table.class);
		if (annotation != null) {
			Table table = (Table) annotation;
			tableName = table.name();
			if (tableName == null) {
				// use class name as table name if it is not declared.
				tableName = entityClass.getSimpleName();
			}
		}
	}

	protected JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}

	protected void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

}